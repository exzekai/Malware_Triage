# Check if the current user has administrator privileges
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    # Create a new process object to start an elevated PowerShell session
    $psi = New-Object System.Diagnostics.ProcessStartInfo
    $psi.FileName = 'powershell'
    $psi.Arguments = "-NoProfile -ExecutionPolicy Bypass -File `"$($MyInvocation.MyCommand.Path)`""

    # Start the process with admin privileges
    $psi.Verb = 'runas'
    $process = [System.Diagnostics.Process]::Start($psi)

    # Wait for the elevated PowerShell session to exit
    $process.WaitForExit()

    # Exit the script
    exit
}

# Get files of last 7 days and sort by recent ones
$startDate = Get-Date
$endDate = (Get-Date).AddDays(-7)
$fileName = "Prefetch_Files_For_" + $startDate.ToString("MM-dd-yy") + "To" + $endDate.ToString("MM-dd-yy") + ".txt"
$outputFile = Join-Path $PSScriptRoot $fileName
Get-ChildItem "C:\Windows\Prefetch" -Recurse -Force -File -Filter * -ErrorAction SilentlyContinue | Where-Object {$_.CreationTime -ge $endDate} | Sort-Object LastWriteTime -Descending | Select-Object Name, Mode, CreationTime, LastWriteTime, `
@{Name='ProcessPath';Expression={$_.VersionInfo.FileName}}, `
@{Name='DevicePath';Expression={$_.FullName.Split('.')[1..$_.FullName.Split('.').Count] -join '.'}} | Out-File $outputFile

# Output a message indicating where the file was saved
Write-Host "Results saved to: $outputFile"

# Pause script execution until user presses a key
Write-Host "Press any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
